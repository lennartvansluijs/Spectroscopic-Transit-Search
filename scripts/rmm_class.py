#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Author:
    Lennart van Sluijs
Date:
    Sep 13 2018
Description:
    Class of RM-model. This is the main class to store all objects
    related to the RM-model in an ordered way.
"""
#%%
import os
import numpy as np
from astropy.io import fits
from aux import *
from rmmodel_func import *
from init_func import *

#%%
class RMModel:
    
    def __init__(self, Rp, radvel, A, b, theta, x0):
        """
        Descrition:
            Initalize empty RM-model class.
        Attributes:
            fullmodel - 2D numpy array with intensities I(t, v)
                        with t time and v radial velocity of a 
                        simulated planet transit where the lines
                        have been subtracted
            model - 2D numpy array with intensities I(t, v) with t time
                    and v radial velocity of a simulated planet transit as it
                    will be injected in one of the observations
            Rp - radius of the planet [R_Jup]
            A - intrinsic line depth
            b - impact parameter
            theta - spin-orbit misalignment [degree]
            x0 - position in front of the star [Rstar]
            radvel - radial velocity grid used for the simulation [km/s]
            obsid - ID of epoch where to inject the transit
            obsdata - store observational data before injection here
        """
        
        # intialize class parameters
        self.Rp = Rp # R_Jup
        self.radvel = radvel # km/s
        self.A = A
        self. b = b
        self.theta = theta
        self.x0 = x0
        self.fullmodel = None
        self.model = None
        self.obsid = None
        self.obsdata = None
        
    def simtransit(self, outputfolder):
        """
        Description:
            Simulate a transiting planet.
        Input:
            outputfolder - save datacubes generated by simulation here
        """
        
        # create outputfolder if it does not exist yet
        if not os.path.exists(outputfolder):
                os.makedirs(outputfolder)
                
        # get full model and save it to the outputfolder
        self.fullmodel = simtransit(self.Rp, self.radvel, self.A,
                                       self.b, self.theta, self.x0,
                                       outputfolder)
    
    def simple_static_model(self, sts, x0_ind):
        """
        Description:
            Create a simple model where a static transit during the whole
            observation is assumed.
        Input:
            x0_ind - positional fullmodel index to use for the injection
            sts - Spectral Time Series used to inject model
        """
        
        # create simple static model
        nframes = len(sts.obsid_dict[self.obsid])
        self.model = np.meshgrid(self.fullmodel[x0_ind], np.arange(nframes))[0]
        self.obsdata = sts.datacube[:, sts.obsid_dict[self.obsid]]